name: CI/CD Empresarial - Analizador SQL

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.10'
  NODE_VERSION: '18'

jobs:
  # Análisis de calidad de código
  analisis-calidad:
    name: 🔍 Análisis de Calidad de Código
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🐍 Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Instalar dependencias
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black mypy bandit safety
        pip install -r requirements.txt
        
    - name: 🎨 Verificar formato de código (Black)
      run: black --check --diff .
      
    - name: 📏 Análisis de estilo (Flake8)
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      
    - name: 🔒 Análisis de seguridad (Bandit)
      run: bandit -r sql_analyzer/ -f json -o bandit-report.json
      continue-on-error: true
      
    - name: 🛡️ Verificar vulnerabilidades (Safety)
      run: safety check --json --output safety-report.json
      continue-on-error: true
      
    - name: 📊 Subir reportes de seguridad
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: reportes-seguridad
        path: |
          bandit-report.json
          safety-report.json

  # Pruebas automatizadas
  pruebas-automatizadas:
    name: 🧪 Pruebas Automatizadas
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🐍 Configurar Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: 📦 Instalar dependencias
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-xdist
        pip install -r requirements.txt
        
    - name: 🧪 Ejecutar pruebas unitarias
      run: |
        pytest tests/ -v --cov=sql_analyzer --cov-report=xml --cov-report=html
        
    - name: 📊 Subir cobertura a Codecov
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
    - name: 📈 Subir reportes de cobertura
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: cobertura-${{ matrix.os }}-py${{ matrix.python-version }}
        path: htmlcov/

  # Pruebas de rendimiento
  pruebas-rendimiento:
    name: ⚡ Pruebas de Rendimiento
    runs-on: ubuntu-latest
    needs: [analisis-calidad]
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🐍 Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Instalar dependencias
      run: |
        python -m pip install --upgrade pip
        pip install pytest-benchmark memory-profiler
        pip install -r requirements.txt
        
    - name: 🏃‍♂️ Ejecutar benchmarks
      run: |
        python -m pytest tests/test_performance.py --benchmark-only --benchmark-json=benchmark.json
      continue-on-error: true
      
    - name: 📊 Subir resultados de benchmark
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: benchmark-results
        path: benchmark.json

  # Pruebas de integración
  pruebas-integracion:
    name: 🔗 Pruebas de Integración
    runs-on: ubuntu-latest
    needs: [pruebas-automatizadas]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: test_db
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306
          
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🐍 Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Instalar dependencias
      run: |
        python -m pip install --upgrade pip
        pip install pytest psycopg2-binary PyMySQL
        pip install -r requirements.txt
        
    - name: 🔗 Ejecutar pruebas de integración
      run: |
        pytest tests/test_integration.py -v
      env:
        MYSQL_HOST: localhost
        MYSQL_PORT: 3306
        MYSQL_USER: root
        MYSQL_PASSWORD: test_password
        MYSQL_DATABASE: test_db
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: test_password
        POSTGRES_DATABASE: test_db

  # Construcción y empaquetado
  construccion:
    name: 📦 Construcción y Empaquetado
    runs-on: ubuntu-latest
    needs: [pruebas-automatizadas, pruebas-rendimiento]
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🐍 Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Instalar herramientas de construcción
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel setuptools
        
    - name: 🏗️ Construir paquete
      run: |
        python -m build
        
    - name: ✅ Verificar paquete
      run: |
        twine check dist/*
        
    - name: 📤 Subir artefactos
      uses: actions/upload-artifact@v3
      with:
        name: paquetes-python
        path: dist/

  # Análisis de seguridad avanzado
  seguridad-avanzada:
    name: 🛡️ Análisis de Seguridad Avanzado
    runs-on: ubuntu-latest
    needs: [analisis-calidad]
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🔍 Análisis CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: python
        
    - name: 🏗️ Autobuild
      uses: github/codeql-action/autobuild@v2
      
    - name: 📊 Realizar análisis CodeQL
      uses: github/codeql-action/analyze@v2

  # Despliegue (solo en releases)
  despliegue:
    name: 🚀 Despliegue
    runs-on: ubuntu-latest
    needs: [construccion, pruebas-integracion, seguridad-avanzada]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🐍 Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Descargar artefactos
      uses: actions/download-artifact@v3
      with:
        name: paquetes-python
        path: dist/
        
    - name: 🚀 Publicar en PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        
    - name: 🏷️ Crear release en GitHub
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notificaciones
  notificaciones:
    name: 📢 Notificaciones
    runs-on: ubuntu-latest
    needs: [pruebas-automatizadas, pruebas-rendimiento, pruebas-integracion]
    if: always()
    
    steps:
    - name: 📊 Recopilar resultados
      run: |
        echo "Estado de pruebas automatizadas: ${{ needs.pruebas-automatizadas.result }}"
        echo "Estado de pruebas de rendimiento: ${{ needs.pruebas-rendimiento.result }}"
        echo "Estado de pruebas de integración: ${{ needs.pruebas-integracion.result }}"
        
    - name: ✅ Notificar éxito
      if: needs.pruebas-automatizadas.result == 'success' && needs.pruebas-integracion.result == 'success'
      run: |
        echo "🎉 ¡Todas las pruebas pasaron exitosamente!"
        
    - name: ❌ Notificar fallos
      if: needs.pruebas-automatizadas.result == 'failure' || needs.pruebas-integracion.result == 'failure'
      run: |
        echo "❌ Algunas pruebas fallaron. Revisar logs para más detalles."
        exit 1

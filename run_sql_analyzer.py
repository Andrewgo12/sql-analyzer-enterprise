#!/usr/bin/env python3
"""
Analizador SQL Empresarial - Iniciador Optimizado
Inicio autom√°tico de alto rendimiento para la aplicaci√≥n web
"""

import os
import sys
import subprocess
import platform
import webbrowser
import time
from pathlib import Path
import json
import logging

# Configuraci√≥n optimizada de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

class SQLAnalyzerLauncher:
    """Lanzador optimizado del Analizador SQL Empresarial."""

    def __init__(self):
        self.project_dir = Path(__file__).parent
        self.web_app_dir = self.project_dir / "web_app"
        self.python_executable = sys.executable
        self.host = "127.0.0.1"
        self.port = 8000
        self.auto_open_browser = True

        # Configuraci√≥n optimizada
        self.config = {
            'max_workers': os.cpu_count() or 4,
            'timeout': 300,
            'memory_limit': '2GB',
            'cache_size': '500MB'
        }

        # Detectar sistema operativo
        self.os_type = platform.system().lower()

        print("üöÄ Analizador SQL Empresarial - Iniciador Optimizado")
        print("=" * 60)
    
    def run(self):
        """Ejecutar el proceso completo de inicio."""
        try:
            print("üìã Verificando requisitos del sistema...")
            self.check_system_requirements()
            
            print("üì¶ Verificando e instalando dependencias...")
            self.install_dependencies()
            
            print("üìÅ Creando estructura de directorios...")
            self.create_directory_structure()
            
            print("‚öôÔ∏è Configurando aplicaci√≥n...")
            self.configure_application()
            
            print("üåê Iniciando servidor web...")
            self.start_web_server()
            
        except KeyboardInterrupt:
            print("\n\nüëã Inicio cancelado por el usuario.")
            sys.exit(0)
        except Exception as e:
            print(f"\n‚ùå Error durante el inicio: {e}")
            logger.error(f"Error: {e}", exc_info=True)
            sys.exit(1)
    
    def check_system_requirements(self):
        """Verificar requisitos del sistema."""
        # Verificar Python
        if sys.version_info < (3, 8):
            raise RuntimeError(f"Python 3.8+ requerido. Versi√≥n actual: {sys.version}")
        print(f"‚úÖ Python {sys.version.split()[0]} - Compatible")
        
        # Verificar pip
        try:
            subprocess.run([self.python_executable, '-m', 'pip', '--version'], 
                         check=True, capture_output=True)
            print("‚úÖ pip - Disponible")
        except subprocess.CalledProcessError:
            raise RuntimeError("pip no est√° disponible")
        
        # Verificar memoria disponible
        try:
            import psutil
            memory_gb = psutil.virtual_memory().total / (1024**3)
            if memory_gb < 2:
                print(f"‚ö†Ô∏è Memoria disponible: {memory_gb:.1f}GB (recomendado: 4GB+)")
            else:
                print(f"‚úÖ Memoria disponible: {memory_gb:.1f}GB")
        except ImportError:
            print("‚ö†Ô∏è No se pudo verificar memoria disponible")
    
    def install_dependencies(self):
        """Instalaci√≥n optimizada de dependencias."""
        # Dependencias esenciales optimizadas
        essential_deps = [
            "fastapi>=0.104.0",
            "uvicorn[standard]>=0.24.0",
            "python-multipart>=0.0.6",
            "jinja2>=3.1.2",
            "aiofiles>=23.2.0",
            "sqlparse>=0.4.4",
            "rich>=13.5.2",
            "chardet>=5.2.0"
        ]

        # Dependencias avanzadas
        advanced_deps = [
            "pandas>=2.1.0",
            "openpyxl>=3.1.2",
            "pyyaml>=6.0.1",
            "psutil>=5.9.5"
        ]

        print("üì¶ Instalando dependencias esenciales...")
        success_count = 0

        # Instalaci√≥n en lote para mejor rendimiento
        try:
            subprocess.run([
                self.python_executable, '-m', 'pip', 'install', '--upgrade'
            ] + essential_deps, check=True, capture_output=True, text=True)
            success_count += len(essential_deps)
            print(f"‚úÖ {len(essential_deps)} dependencias esenciales instaladas")
        except subprocess.CalledProcessError:
            # Fallback: instalaci√≥n individual
            for dep in essential_deps:
                if self.install_package(dep, required=True):
                    success_count += 1

        print("üì¶ Instalando dependencias avanzadas...")
        for dep in advanced_deps:
            if self.install_package(dep, required=False):
                success_count += 1

        print(f"‚úÖ Instalaci√≥n completada: {success_count} paquetes instalados")
    
    def install_package(self, package, required=True):
        """Instalaci√≥n optimizada de paquete individual."""
        try:
            result = subprocess.run([
                self.python_executable, '-m', 'pip', 'install',
                '--upgrade', '--no-warn-script-location', package
            ], check=True, capture_output=True, text=True, timeout=120)
            print(f"  ‚úÖ {package}")
            return True
        except subprocess.CalledProcessError as e:
            if required:
                print(f"  ‚ùå {package} - Error: {e.stderr.strip()}")
                raise RuntimeError(f"No se pudo instalar dependencia requerida: {package}")
            else:
                print(f"  ‚ö†Ô∏è {package} - Opcional, omitido")
                return False
        except subprocess.TimeoutExpired:
            print(f"  ‚è∞ {package} - Timeout, omitido")
            return False
    
    def create_directory_structure(self):
        """Crear estructura de directorios necesaria."""
        directories = [
            "web_app/static/css",
            "web_app/static/js",
            "web_app/static/img",
            "web_app/templates",
            "sql_analyzer/core",
            "sql_analyzer/ui",
            "uploads",
            "results",
            "logs",
            "cache"
        ]
        
        for directory in directories:
            dir_path = self.project_dir / directory
            dir_path.mkdir(parents=True, exist_ok=True)
            
        print("‚úÖ Estructura de directorios creada")
    
    def configure_application(self):
        """Configurar la aplicaci√≥n."""
        # Crear archivo de configuraci√≥n
        config = {
            "app": {
                "name": "Analizador SQL Empresarial",
                "version": "2.0.0",
                "debug": False
            },
            "server": {
                "host": self.host,
                "port": self.port,
                "reload": False
            },
            "upload": {
                "max_file_size": 10 * 1024 * 1024 * 1024,  # 10GB
                "allowed_extensions": [".sql", ".txt", ".text"],
                "upload_dir": "uploads"
            },
            "analysis": {
                "max_workers": min(8, os.cpu_count() or 4),
                "timeout_seconds": 3600,
                "cache_enabled": True
            }
        }
        
        config_file = self.project_dir / "config.json"
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2, ensure_ascii=False)
        
        print("‚úÖ Configuraci√≥n de aplicaci√≥n creada")
    
    def start_web_server(self):
        """Iniciar el servidor web."""
        print(f"üåê Iniciando servidor en http://{self.host}:{self.port}")
        print("üì± La interfaz web se abrir√° autom√°ticamente...")
        print("\n" + "=" * 60)
        print("üéØ INSTRUCCIONES DE USO:")
        print("1. La aplicaci√≥n se abrir√° en tu navegador web")
        print("2. Arrastra un archivo SQL al √°rea de carga")
        print("3. Configura las opciones de an√°lisis")
        print("4. Haz clic en 'Iniciar An√°lisis'")
        print("5. Descarga los resultados cuando est√© completo")
        print("=" * 60)
        print("\n‚è≥ Iniciando servidor...")
        
        # Cambiar al directorio del proyecto
        os.chdir(self.project_dir)
        
        # Verificar que el archivo del servidor existe
        server_file = self.web_app_dir / "server.py"
        if not server_file.exists():
            raise FileNotFoundError(f"Archivo del servidor no encontrado: {server_file}")
        
        # Programar apertura del navegador
        if self.auto_open_browser:
            import threading
            def open_browser():
                time.sleep(3)  # Esperar a que el servidor inicie
                url = f"http://{self.host}:{self.port}"
                print(f"üåê Abriendo navegador: {url}")
                webbrowser.open(url)
            
            browser_thread = threading.Thread(target=open_browser, daemon=True)
            browser_thread.start()
        
        # Iniciar servidor
        try:
            cmd = [
                self.python_executable, "-m", "uvicorn",
                "web_app.server:app",
                "--host", self.host,
                "--port", str(self.port),
                "--reload"
            ]
            
            print(f"üöÄ Ejecutando: {' '.join(cmd)}")
            print("\n" + "üü¢" * 20 + " SERVIDOR INICIADO " + "üü¢" * 20)
            print(f"üìç URL: http://{self.host}:{self.port}")
            print("üõë Presiona Ctrl+C para detener el servidor")
            print("üü¢" * 60 + "\n")
            
            # Ejecutar servidor
            subprocess.run(cmd, check=True)
            
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Error iniciando servidor: {e}")
            print("\nüîß Intentando m√©todo alternativo...")
            
            # M√©todo alternativo: ejecutar directamente
            try:
                sys.path.insert(0, str(self.project_dir))
                import uvicorn
                from web_app.server import app
                
                uvicorn.run(
                    app,
                    host=self.host,
                    port=self.port,
                    reload=True,
                    log_level="info"
                )
            except Exception as alt_error:
                print(f"‚ùå Error en m√©todo alternativo: {alt_error}")
                raise
        
        except KeyboardInterrupt:
            print("\n\nüõë Servidor detenido por el usuario")
            print("üëã ¬°Gracias por usar el Analizador SQL Empresarial!")
    
    def show_help(self):
        """Mostrar ayuda de uso."""
        help_text = """
üöÄ Analizador SQL Empresarial - Ayuda

USO:
    python run_sql_analyzer.py [opciones]

OPCIONES:
    --host HOST         Direcci√≥n IP del servidor (default: 127.0.0.1)
    --port PORT         Puerto del servidor (default: 8000)
    --no-browser        No abrir navegador autom√°ticamente
    --help              Mostrar esta ayuda

EJEMPLOS:
    python run_sql_analyzer.py
    python run_sql_analyzer.py --port 8080
    python run_sql_analyzer.py --host 0.0.0.0 --port 8000
    python run_sql_analyzer.py --no-browser

CARACTER√çSTICAS:
    ‚úÖ An√°lisis de archivos SQL hasta 10GB
    ‚úÖ Detecci√≥n autom√°tica de errores
    ‚úÖ An√°lisis de esquema de base de datos
    ‚úÖ Reconocimiento de dominio con IA
    ‚úÖ Reportes empresariales en m√∫ltiples formatos
    ‚úÖ Interfaz web moderna y responsiva
    ‚úÖ Procesamiento en tiempo real

SOPORTE:
    üìß Para soporte t√©cnico, consulta la documentaci√≥n
    üåê Interfaz web: http://localhost:8000
    üìä API Docs: http://localhost:8000/api/docs
        """
        print(help_text)

def main():
    """Funci√≥n principal."""
    import argparse
    
    parser = argparse.ArgumentParser(
        description="Analizador SQL Empresarial - Iniciador Autom√°tico",
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    parser.add_argument(
        '--host',
        default='127.0.0.1',
        help='Direcci√≥n IP del servidor (default: 127.0.0.1)'
    )
    
    parser.add_argument(
        '--port',
        type=int,
        default=8000,
        help='Puerto del servidor (default: 8000)'
    )
    
    parser.add_argument(
        '--no-browser',
        action='store_true',
        help='No abrir navegador autom√°ticamente'
    )
    
    args = parser.parse_args()
    
    # Crear y configurar launcher
    launcher = SQLAnalyzerLauncher()
    launcher.host = args.host
    launcher.port = args.port
    launcher.auto_open_browser = not args.no_browser
    
    # Ejecutar
    launcher.run()

if __name__ == "__main__":
    main()

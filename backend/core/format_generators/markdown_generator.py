"""
Markdown Documentation Generator

Generates comprehensive Markdown documentation compatible with GitHub and other platforms.
"""

import time
from typing import Dict, Any, List
from .base_generator import BaseFormatGenerator, GenerationContext, GenerationResult


class MarkdownDocumentationGenerator(BaseFormatGenerator):
    """Generator for comprehensive Markdown documentation."""

    @property
    def format_name(self) -> str:
        return "Documentaci√≥n Markdown"

    @property
    def file_extension(self) -> str:
        return ".md"

    @property
    def mime_type(self) -> str:
        return "text/markdown"

    @property
    def is_binary(self) -> bool:
        return False

    def generate(self, context: GenerationContext) -> GenerationResult:
        """Generate comprehensive Markdown documentation."""
        start_time = time.time()

        try:
            self.validate_context(context)

            # Generate Markdown content
            md_content = self._generate_markdown_content(context)

            generation_time = time.time() - start_time

            return self.create_generation_result(
                md_content, context, generation_time,
                metadata={
                    "sections": 6,
                    "github_compatible": True,
                    "includes_toc": True
                }
            )

        except Exception as e:
            return self.handle_generation_error(e, context)

    def _generate_header(self, template_vars: Dict[str, Any]) -> str:
        """Generate the document header."""
        return f"""# üìä An√°lisis SQL - {template_vars['original_filename']}

> **Reporte de An√°lisis Autom√°tico**
> Generado por SQL Analyzer Enterprise
> Fecha: {template_vars['analysis_timestamp'].strftime('%d de %B de %Y a las %H:%M:%S')}

---

[![SQL Analyzer](https://img.shields.io/badge/SQL-Analyzer-blue.svg)](https://github.com/sql-analyzer-enterprise)
[![Calidad](https://img.shields.io/badge/Calidad-{template_vars['summary']['quality_score']}%25-{'green' if template_vars['summary']['quality_score'] >= 80 else 'yellow' if template_vars['summary']['quality_score'] >= 60 else 'red'}.svg)](#{template_vars['summary']['quality_score']})
[![Errores](https://img.shields.io/badge/Errores-{template_vars['summary']['total_errors']}-{'red' if template_vars['summary']['total_errors'] > 10 else 'yellow' if template_vars['summary']['total_errors'] > 0 else 'green'}.svg)](#{template_vars['summary']['total_errors']})"""

- [üìä Resumen Ejecutivo](#-resumen-ejecutivo)
- [üêõ Errores Detectados](#-errores-detectados)
- [üí° Recomendaciones](#-recomendaciones)
- [üîß Detalles T√©cnicos](#-detalles-t√©cnicos)
- [üìà M√©tricas de Calidad](#-m√©tricas-de-calidad)
- [üöÄ Pr√≥ximos Pasos](#-pr√≥ximos-pasos)"""

Este documento presenta el an√°lisis completo del archivo SQL **`{template_vars['original_filename']}`**.

### üìä M√©tricas Principales

| M√©trica | Valor | Estado |
|---------|-------|--------|
| **Total de Errores** | {summary['total_errors']} | {'üî¥ Cr√≠tico' if summary['total_errors'] > 20 else 'üü° Atenci√≥n' if summary['total_errors'] > 5 else 'üü¢ Bueno'} |
| **Puntuaci√≥n de Calidad** | {summary['quality_score']}% | {'üü¢ Excelente' if summary['quality_score'] >= 90 else 'üü° Bueno' if summary['quality_score'] >= 70 else 'üî¥ Necesita Mejora'} |
| **L√≠neas Analizadas** | {summary['lines_analyzed']:,} | üìè |
| **Correcciones Sugeridas** | {summary['fixes_suggested']} | {'üîß Disponibles' if summary['fixes_suggested'] > 0 else '‚úÖ Ninguna'} |

### üé® Distribuci√≥n de Errores

```mermaid
pie title Distribuci√≥n de Errores por Severidad
    "Cr√≠ticos" : {summary['critical_errors']}
    "Altos" : {summary['high_errors']}
    "Medios" : {summary['medium_errors']}
    "Bajos" : {summary['low_errors']}
```"""

El an√°lisis del archivo **`{template_vars['original_filename']}`** ({summary['file_size']:,} bytes) ha sido completado exitosamente. Se procesaron **{summary['lines_analyzed']:,} l√≠neas** de c√≥digo SQL y se identificaron **{summary['total_errors']} errores** de diferentes niveles de severidad.

### üìà Puntuaci√≥n de Calidad: {summary['quality_score']}%

{'üü¢ **Excelente calidad de c√≥digo**' if summary['quality_score'] >= 90 else 'üü° **Buena calidad con margen de mejora**' if summary['quality_score'] >= 70 else 'üî¥ **Calidad baja - requiere atenci√≥n inmediata**'}

### üö® Errores por Severidad

| Severidad | Cantidad | Porcentaje | Descripci√≥n |
|-----------|----------|------------|-------------|
| üî¥ **Cr√≠ticos** | {summary['critical_errors']} | {(summary['critical_errors']/max(1,summary['total_errors'])*100):.1f}% | Errores que impiden la ejecuci√≥n |
| üü† **Altos** | {summary['high_errors']} | {(summary['high_errors']/max(1,summary['total_errors'])*100):.1f}% | Errores que afectan funcionalidad |
| üü° **Medios** | {summary['medium_errors']} | {(summary['medium_errors']/max(1,summary['total_errors'])*100):.1f}% | Problemas de rendimiento o estilo |
| üü¢ **Bajos** | {summary['low_errors']} | {(summary['low_errors']/max(1,summary['total_errors'])*100):.1f}% | Sugerencias de mejora |

### üéØ Hallazgos Clave

{self._generate_key_findings(summary)}"""

    def _generate_errors_section(self, template_vars: Dict[str, Any]) -> str:
        """Generate errors section."""
        errors = template_vars['errors']

        if not errors:
            return """## üêõ Errores Detectados

### ‚úÖ ¬°Excelente! No se encontraron errores

El c√≥digo SQL analizado no presenta errores detectables. Esto indica:

- ‚úÖ Sintaxis correcta
- ‚úÖ Buenas pr√°cticas aplicadas
- ‚úÖ C√≥digo bien estructurado"""

        content = ["""## üêõ Errores Detectados

### üìã Lista de Errores Encontrados

A continuaci√≥n se detallan todos los errores identificados durante el an√°lisis:"""]

        # Group errors by severity
        errors_by_severity = {
            'CRITICAL': [e for e in errors if e.get('severity') == 'CRITICAL'],
            'HIGH': [e for e in errors if e.get('severity') == 'HIGH'],
            'MEDIUM': [e for e in errors if e.get('severity') == 'MEDIUM'],
            'LOW': [e for e in errors if e.get('severity') == 'LOW']
        }

        severity_icons = {
            'CRITICAL': 'üî¥',
            'HIGH': 'üü†',
            'MEDIUM': 'üü°',
            'LOW': 'üü¢'
        }

        severity_names = {
            'CRITICAL': 'Cr√≠ticos',
            'HIGH': 'Altos',
            'MEDIUM': 'Medios',
            'LOW': 'Bajos'
        }

        for severity, error_list in errors_by_severity.items():
            if not error_list:
                continue

            content.append(f"""### {severity_icons[severity]} Errores {severity_names[severity]} ({len(error_list)})""")

            for i, error in enumerate(error_list[:10], 1):  # Limit to 10 per severity
                content.append(self._format_error_markdown(error, i))

            if len(error_list) > 10:
                content.append(f"\n> **Nota:** Se muestran los primeros 10 errores. Total: {len(error_list)}")

        return '\n\n'.join(content)

**üìç Ubicaci√≥n:** L√≠nea {error.get('line', 'N/A')}, Columna {error.get('column', 'N/A')}
**üè∑Ô∏è Severidad:** ![{error.get('severity', 'LOW')}](https://img.shields.io/badge/Severidad-{error.get('severity', 'LOW')}-{color}.svg)
**üìÇ Categor√≠a:** `{error.get('category', 'general')}`

**üìù Descripci√≥n:**
{error.get('description', 'Sin descripci√≥n disponible')}"""

        # Add fixes if available
        fixes = error.get('fixes', [])
        if fixes:
            content += "\n\n**üîß Correcciones Sugeridas:**\n"
            for j, fix in enumerate(fixes[:3], 1):  # Limit to 3 fixes
                confidence = fix.get('confidence', 0) * 100
                content += f"\n{j}. **{fix.get('description', 'Sin descripci√≥n')}**"
                content += f"\n   - Confianza: {confidence:.1f}%"
                if fix.get('explanation'):
                    content += f"\n   - Explicaci√≥n: {fix.get('explanation')}"

        return content

    def _generate_recommendations_section(self, template_vars: Dict[str, Any]) -> str:
        """Generate recommendations section."""
        summary = template_vars['summary']

        content = ["""## üí° Recomendaciones

### üéØ Acciones Recomendadas

Bas√°ndose en el an√°lisis realizado, se sugieren las siguientes acciones:"""]

        recommendations = []

        if summary['critical_errors'] > 0:
            recommendations.append({
                'priority': 'URGENTE',
                'icon': 'üö®',
                'title': 'Correcci√≥n de Errores Cr√≠ticos',
                'description': f'Se encontraron {summary["critical_errors"]} errores cr√≠ticos que deben corregirse antes de ejecutar el c√≥digo en producci√≥n.',
                'action': 'Revisar y corregir cada error cr√≠tico listado en la secci√≥n anterior.'
            })

        if summary['high_errors'] > 0:
            recommendations.append({
                'priority': 'ALTA',
                'icon': '‚ö†Ô∏è',
                'title': 'Correcci√≥n de Errores de Alta Prioridad',
                'description': f'Se identificaron {summary["high_errors"]} errores de alta prioridad que afectan la funcionalidad.',
                'action': 'Planificar la correcci√≥n de estos errores en el pr√≥ximo ciclo de desarrollo.'
            })

        if summary['quality_score'] < 70:
            recommendations.append({
                'priority': 'MEDIA',
                'icon': 'üìà',
                'title': 'Mejora de Calidad del C√≥digo',
                'description': f'La puntuaci√≥n de calidad ({summary["quality_score"]}%) est√° por debajo del umbral recomendado (70%).',
                'action': 'Considerar refactorizaci√≥n del c√≥digo para mejorar la legibilidad y mantenibilidad.'
            })

        if summary['fixes_suggested'] > 0:
            recommendations.append({
                'priority': 'MEDIA',
                'icon': 'üîß',
                'title': 'Aplicaci√≥n de Correcciones Autom√°ticas',
                'description': f'{summary["fixes_suggested"]} correcciones pueden aplicarse autom√°ticamente.',
                'action': 'Revisar y aplicar las correcciones autom√°ticas sugeridas.'
            })

        # Add general recommendations
        recommendations.extend([
            {
                'priority': 'BAJA',
                'icon': 'üìö',
                'title': 'Documentaci√≥n y Mejores Pr√°cticas',
                'description': 'Revisar la documentaci√≥n para implementar mejores pr√°cticas de SQL.',
                'action': 'Consultar gu√≠as de estilo SQL y est√°ndares de la organizaci√≥n.'
            },
            {
                'priority': 'BAJA',
                'icon': 'üîç',
                'title': 'Revisiones de C√≥digo Regulares',
                'description': 'Implementar un proceso de revisi√≥n de c√≥digo sistem√°tico.',
                'action': 'Establecer revisiones por pares antes de desplegar cambios.'
            },
            {
                'priority': 'BAJA',
                'icon': 'üß™',
                'title': 'Testing y Validaci√≥n',
                'description': 'Probar el c√≥digo en un entorno de desarrollo antes de producci√≥n.',
                'action': 'Crear casos de prueba y validar en entorno de staging.'
            }
        ])

        for rec in recommendations:
            priority_colors = {
                'URGENTE': 'red',
                'ALTA': 'orange',
                'MEDIA': 'yellow',
                'BAJA': 'green'
            }

            color = priority_colors.get(rec['priority'], 'gray')

            content.append(f"""#### {rec['icon']} {rec['title']}

![Prioridad](https://img.shields.io/badge/Prioridad-{rec['priority']}-{color}.svg)

**Descripci√≥n:** {rec['description']}

**Acci√≥n Recomendada:** {rec['action']}""")

        return '\n\n'.join(content)

    def _generate_technical_details(self, template_vars: Dict[str, Any]) -> str:
        """Generate technical details section."""
        return f"""## üîß Detalles T√©cnicos

### üìã Informaci√≥n del An√°lisis

| Campo | Valor |
|-------|-------|
| **Generador** | {template_vars['generator_name']} v{template_vars['generator_version']} |
| **Sesi√≥n de An√°lisis** | `{template_vars['session_id']}` |
| **Idioma del Reporte** | {template_vars['language']} |
| **Archivo Original** | `{template_vars['original_filename']}` |
| **Timestamp** | {template_vars['analysis_timestamp'].isoformat()} |

### üèóÔ∏è Arquitectura del An√°lisis

```mermaid
graph TD
    A[Archivo SQL] --> B[Parser SQL]
    B --> C[Detector de Errores]
    C --> D[Analizador de Esquemas]
    D --> E[Generador de Reportes]
    E --> F[Reporte Markdown]
```

### üìä Estad√≠sticas de Procesamiento

- **Tiempo de An√°lisis:** Completado en tiempo √≥ptimo
- **Memoria Utilizada:** Eficiente para archivos de este tama√±o
- **Algoritmos Aplicados:** An√°lisis est√°tico, detecci√≥n de patrones, validaci√≥n de sintaxis"""

    def _generate_footer(self, template_vars: Dict[str, Any]) -> str:
        """Generate document footer."""
        return f"""## üöÄ Pr√≥ximos Pasos

### ‚úÖ Lista de Verificaci√≥n

- [ ] Revisar todos los errores cr√≠ticos
- [ ] Aplicar correcciones sugeridas
- [ ] Validar cambios en entorno de desarrollo
- [ ] Ejecutar pruebas de regresi√≥n
- [ ] Documentar cambios realizados
- [ ] Desplegar a producci√≥n

### üìû Soporte

¬øNecesita ayuda adicional? Contacte al equipo de soporte:

- üìß **Email:** support@sql-analyzer-enterprise.com
- üìö **Documentaci√≥n:** [docs.sql-analyzer-enterprise.com](https://docs.sql-analyzer-enterprise.com)
- üêõ **Reportar Issues:** [github.com/sql-analyzer-enterprise/issues](https://github.com/sql-analyzer-enterprise/issues)

---

**Generado por SQL Analyzer Enterprise**
*Transformando el an√°lisis de c√≥digo SQL con tecnolog√≠a avanzada*

![SQL Analyzer Enterprise](https://img.shields.io/badge/Powered%20by-SQL%20Analyzer%20Enterprise-blue.svg)
![Versi√≥n](https://img.shields.io/badge/Versi√≥n-{template_vars['generator_version']}-green.svg)
![Licencia](https://img.shields.io/badge/Licencia-MIT-blue.svg)

> üìÖ **Fecha de generaci√≥n:** {template_vars['analysis_timestamp'].strftime('%d de %B de %Y a las %H:%M:%S')}
> üîó **Sesi√≥n:** `{template_vars['session_id']}`"""

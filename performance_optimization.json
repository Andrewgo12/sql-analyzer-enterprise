{
  "system_performance": {
    "metrics": {
      "cpu_usage": 9.9,
      "memory_total": 17032237056,
      "memory_available": 1893326848,
      "memory_percent": 88.9,
      "disk_total": 254892982272,
      "disk_free": 117609668608,
      "disk_percent": 53.9,
      "network_bytes_sent": 7943595261,
      "network_bytes_recv": 10772998687,
      "process_memory_rss": 36257792,
      "process_memory_vms": 25509888
    },
    "issues": [
      {
        "type": "high_memory",
        "severity": "high",
        "value": 88.9,
        "recommendation": "Optimize memory usage and implement caching"
      }
    ],
    "overall_health": "needs_attention"
  },
  "api_performance": {
    "/api/health": {
      "avg_response_time": 3.0218032360076905,
      "min_response_time": 3.0144150257110596,
      "max_response_time": 3.0313713550567627,
      "successful_requests": 5,
      "performance_grade": "F"
    },
    "/api/databases/supported": {
      "avg_response_time": 2.0473485946655274,
      "min_response_time": 2.0083413124084473,
      "max_response_time": 2.1461374759674072,
      "successful_requests": 5,
      "performance_grade": "F"
    },
    "/api/export/formats": {
      "avg_response_time": 2.017045783996582,
      "min_response_time": 2.0146701335906982,
      "max_response_time": 2.0197763442993164,
      "successful_requests": 5,
      "performance_grade": "F"
    },
    "/api/metrics/dashboard": {
      "error": "HTTPConnectionPool(host='localhost', port=5000): Read timed out. (read timeout=5)",
      "performance_grade": "F"
    },
    "load_test": {
      "concurrent_requests": 10,
      "successful_requests": 10,
      "success_rate": 100.0,
      "avg_response_time": 3.096150040626526,
      "requests_per_second": 3.194245231102961,
      "total_time": 3.1306300163269043
    }
  },
  "code_performance": {
    "total_issues": 21,
    "high_priority_issues": 4,
    "medium_priority_issues": 7,
    "low_priority_issues": 10,
    "issues": [
      {
        "file": "backend_server.py",
        "type": "large_file_read",
        "severity": "low",
        "description": "Reading entire file into memory",
        "recommendation": "Consider streaming for large files"
      },
      {
        "file": "comprehensive_code_review.py",
        "type": "inefficient_loops",
        "severity": "medium",
        "description": "Potentially inefficient loops with string concatenation",
        "recommendation": "Use join() or list comprehensions"
      },
      {
        "file": "comprehensive_code_review.py",
        "type": "db_queries_in_loop",
        "severity": "high",
        "description": "Database queries inside loops",
        "recommendation": "Batch queries or use bulk operations"
      },
      {
        "file": "comprehensive_code_review.py",
        "type": "large_file_read",
        "severity": "low",
        "description": "Reading entire file into memory",
        "recommendation": "Consider streaming for large files"
      },
      {
        "file": "comprehensive_code_review.py",
        "type": "inefficient_append",
        "severity": "low",
        "description": "Multiple append operations",
        "recommendation": "Pre-allocate list size or use list comprehension"
      },
      {
        "file": "functionality_verification.py",
        "type": "synchronous_http",
        "severity": "medium",
        "description": "Synchronous HTTP requests detected",
        "recommendation": "Use async/await with aiohttp for better performance"
      },
      {
        "file": "functionality_verification.py",
        "type": "inefficient_loops",
        "severity": "medium",
        "description": "Potentially inefficient loops with string concatenation",
        "recommendation": "Use join() or list comprehensions"
      },
      {
        "file": "functionality_verification.py",
        "type": "large_file_read",
        "severity": "low",
        "description": "Reading entire file into memory",
        "recommendation": "Consider streaming for large files"
      },
      {
        "file": "performance_optimization.py",
        "type": "inefficient_loops",
        "severity": "medium",
        "description": "Potentially inefficient loops with string concatenation",
        "recommendation": "Use join() or list comprehensions"
      },
      {
        "file": "performance_optimization.py",
        "type": "db_queries_in_loop",
        "severity": "high",
        "description": "Database queries inside loops",
        "recommendation": "Batch queries or use bulk operations"
      }
    ],
    "performance_score": 58
  },
  "bottlenecks": [
    {
      "category": "system",
      "type": "high_memory",
      "severity": "high",
      "impact": "high",
      "description": "System high_memory: 88.9%",
      "recommendation": "Optimize memory usage and implement caching"
    },
    {
      "category": "api",
      "type": "slow_endpoint",
      "severity": "medium",
      "impact": "medium",
      "description": "Slow API endpoint: /api/health",
      "recommendation": "Optimize endpoint logic and add caching"
    },
    {
      "category": "api",
      "type": "slow_endpoint",
      "severity": "medium",
      "impact": "medium",
      "description": "Slow API endpoint: /api/databases/supported",
      "recommendation": "Optimize endpoint logic and add caching"
    },
    {
      "category": "api",
      "type": "slow_endpoint",
      "severity": "medium",
      "impact": "medium",
      "description": "Slow API endpoint: /api/export/formats",
      "recommendation": "Optimize endpoint logic and add caching"
    },
    {
      "category": "api",
      "type": "slow_endpoint",
      "severity": "medium",
      "impact": "medium",
      "description": "Slow API endpoint: /api/metrics/dashboard",
      "recommendation": "Optimize endpoint logic and add caching"
    },
    {
      "category": "code",
      "type": "performance_anti_patterns",
      "severity": "high",
      "impact": "high",
      "description": "4 high-priority code performance issues",
      "recommendation": "Refactor code to eliminate performance anti-patterns"
    }
  ],
  "optimization_recommendations": [
    {
      "category": "Critical Performance",
      "priority": "HIGH",
      "impact": "Very High",
      "effort": "Medium",
      "title": "Fix Critical Performance Bottlenecks",
      "description": "Address 2 critical performance issues",
      "actions": [
        "Optimize memory usage and implement caching",
        "Refactor code to eliminate performance anti-patterns"
      ],
      "expected_improvement": "30-50% performance gain"
    },
    {
      "category": "API Performance",
      "priority": "HIGH",
      "impact": "High",
      "effort": "Medium",
      "title": "Optimize Slow API Endpoints",
      "description": "Optimize 4 slow API endpoints",
      "actions": [
        "Implement response caching",
        "Optimize database queries",
        "Add request/response compression",
        "Implement connection pooling"
      ],
      "expected_improvement": "50-70% faster API responses"
    },
    {
      "category": "Code Optimization",
      "priority": "MEDIUM",
      "impact": "Medium",
      "effort": "High",
      "title": "Optimize Code Performance Patterns",
      "description": "Refactor code to eliminate performance anti-patterns",
      "actions": [
        "Convert synchronous operations to async",
        "Optimize loops and data structures",
        "Implement efficient caching strategies",
        "Batch database operations"
      ],
      "expected_improvement": "20-40% overall performance gain"
    },
    {
      "category": "System Optimization",
      "priority": "MEDIUM",
      "impact": "Medium",
      "effort": "Low",
      "title": "Optimize System Resources",
      "description": "Improve system resource utilization",
      "actions": [
        "Implement memory management strategies",
        "Optimize CPU-intensive operations",
        "Clean up disk space and logs",
        "Configure system monitoring"
      ],
      "expected_improvement": "15-25% better resource utilization"
    }
  ]
}